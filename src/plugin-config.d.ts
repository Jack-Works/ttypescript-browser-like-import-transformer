/**
 * @packageDocumentation
 */

/**
 * Config of this transformer
 * @public
 */
export interface PluginConfigs {
    /**
     * Add '.js' extension for local import path.
     * @defaultValue .js
     * @remarks
     * - `false`: disable the transform
     *
     * - `true`: same as ".js"
     *
     * - a string: set your extension name like ".mjs", ".js" or ".ejs"
     * @example
     * Source code:
     * !src(appendExtensionName-default.ts)
     * Outputs:
     * !out(appendExtensionName-false.js)
     * !out(appendExtensionName-true.js)
     * !out(appendExtensionName-string.js)
     */
    appendExtensionName?: string | boolean
    /**
     * Also append extension '.js' to http:// or https:// URLs.
     * @defaultValue false
     * @example
     * Source code:
     * !src(appendExtensionName-default.ts)
     * Outputs:
     * !out(appendExtensionNameForRemote-false.js)
     * !out(appendExtensionNameForRemote-true.js)
     */
    appendExtensionNameForRemote?: boolean
    /**
     * The transformation rule. Specify how this transformer will handle your imports.
     * @remarks
     * This is the most powerful part of this transformer.
     * You can specify the transform rule of bare imports (like `import 'React'`) to the form that browser can recognize.
     * See {@link BareModuleRewriteObject}
     *
     * When it is a `Record<string, BareModuleRewriteObject>`,
     * you can use two kinds of matching rule to matching your import paths.
     *
     * - Full match: use normal string to do a full match. (`"react"` will only match "react")
     *
     * - RegExp match: use JavaScript RegExp to match dependencies. (`"/^@material-ui\/(.+)/g"` will match all packages started with `@material-ui`)
     *
     * @example
     * A complex example:
     * ```js
     * {bareModuleRewrite: {
     *      react: "umd",
     *      "lodash-es": "pikacdn",
     *      "async-call-rpc": "unpkg",
     *      "std:fs": false,
     *      "isarray": "snowpack",
     *      // === /^@material-ui\/(.+)/g
     *      "/^@material-ui\\/(.+)/g": {
     *          type: "umd",
     *          target: "MaterialUI.$1",
     *          globalObject: "window"
     *      },
     *      "/(.+)/g": "snowpack"
     * }}
     * ```
     * !src(demo-2.ts)
     * Output:
     * !out(demo-2.js)
     */
    bareModuleRewrite?: Exclude<BareModuleRewriteObject, BareModuleRewriteUMD> & Record<string, BareModuleRewriteObject>
    /**
     * Config how to rewrite dynamic import.
     * @remarks
     * - `false`: Do not rewrite
     *
     * - `'auto'`: try to optimise automatically
     *
     * - {@link DynamicImportPathRewriteCustom}: using a custom function to handle the import path
     * @defaultValue auto
     * @example
     *
     * Source:
     * !src(dynamicImportPathRewrite-default.ts)
     * Outputs:
     * !out(dynamicImportPathRewrite-auto.js)
     * !out(dynamicImportPathRewrite-custom-arrow.js)
     * !out(dynamicImportPathRewrite-false.js)
     */
    dynamicImportPathRewrite?: false | 'auto' | DynamicImportPathRewriteCustom
    /**
     * When using UMD import, this option indicates what global object will be used to find the UMD variables.
     * @defaultValue globalThis
     * @example
     * - "globalThis" in all modern ES platforms.
     *
     * - "window" or "self" in browsers.
     *
     * - "global" in NodeJS.
     *
     * Source:
     * !src(globalObject-default.ts)
     * Outputs:
     * !out(globalObject-undefined.js)
     * !out(globalObject-string.js)
     * !out(globalObject-window.js)
     */
    globalObject?: string
    /**
     * Used in snowpack. web_modules module path
     * @remarks
     * Choose what `webModulePath` to use when transform as snowpack import. See document of [snowpack](https://www.snowpack.dev/).
     * @defaultValue /web_modules/
     * @deprecated Should try the new importMap support
     * @example
     * Source:
     * !src(default.ts)
     * Outputs:
     * !out(webModulePath-string.js)
     * !out(webModulePath-undefined.js)
     */
    webModulePath?: string
    /**
     * Use import map as the transform rules. (This has the highest priority.)
     * @remarks
     * **Experimental** may have many bugs on transforming with importMap.
     * See {@link ImportMapResolution} (static) or {@link ImportMapCustomResolution} (dynamic)
     * @defaultValue undefined
     * @example
     * If you're using snowpack, let's assume the folder is like
     *
     * Folder:
     * ```shell
     * /web_modules/ # generated by snowpack
     * /src/ # your source code
     * /dist/ # your output
     * tsconfig.json # tsconfig at here
     * ```
     *
     * You must set `rootDir` when using importMap.
     * !src(snowpack/tsconfig.json)
     * Source:
     * !src(snowpack/src/index.ts)
     * Output:
     * !out(snowpack/index.js)
     */
    importMap?: ImportMapResolution | ImportMapCustomResolution
    /**
     * Import emit helpers (e.g. `\__UMDBindCheck`, `\__dynamicImportTransform`, etc..)
     * from ttsclib (a local file in this package).
     *
     * @remarks
     *
     * - "inline": All the import helpers will be injected in the file
     *
     * - "cdn": import it from jsdelivr
     *
     * - "node": import it as a bare import (from `@magic-works/...`)
     *
     * - "auto": Use the transformer default
     *
     * - string: A URL, will import helper from that place.
     *
     * @defaultValue auto
     * @example
     * Source:
     * ```ts
     * import(x)
     * ```
     * Output:
     * !out(importHelpers-auto.js)
     * !out(importHelpers-string.js)
     * !out(importHelpers-cdn.js)
     * !out(importHelpers-node.js)
     * !out(importHelpers-inline.js)
     */
    importHelpers?: 'inline' | 'auto' | 'cdn' | 'node' | string
    /**
     * Use property access syntax to access UMD variable
     * @defaultValue true
     * @remarks
     * By turning this off, this transformer will emit dangerous code.
     * This might be useful in some cases: e.g.
     * you want a limited code generation (before: import "a('b')", out: globalThis.a('b')).
     *
     * After opening this option, the code above will become `globalThis["a('b')"]`
     * which is safe.
     * @example
     * !src(safeAccess-default.ts)
     * !out(safeAccess-default.js)
     * !out(safeAccess-true.js)
     * !out(safeAccess-false.js)
     */
    safeAccess?: string
}
/**
 * @public
 * @remarks
 * See {@link ImportMapFunctionOpts}
 */
export interface ImportMapCustomResolution {
    type: 'function'
    /**
     * The function that will resolve a path to another path.
     * @remarks
     * Since it is a function, it can't be specified in the tsconfig by ttscript.
     */
    function: (opt: ImportMapFunctionOpts) => string | null
}
/**
 * @public
 */
export interface ImportMapResolution {
    type: 'map'
    /** Path of the ImportMap */
    mapPath: string
    /** The ImportMap */
    mapObject?: object
    /** The runtime path of your ImportMap */
    simulateRuntimeImportMapPosition: string
    /** The runtime path of your source root */
    simulateRuntimeSourceRoot?: string
}

/**
 * Predefined rewrite rules
 *
 * @remarks
 *
 * - snowpack: Rewrite to snowpack (/web_modules) (deprecated: should use import map)
 *
 * - umd: Rewrite to UMD import
 *
 * - unpkg: Rewrite to unpkg (a CDN)
 *
 * - pikacdn: Rewrite to pikacdn (another CDN)
 *
 * @example
 * Source code:
 * !src(bareModuleRewrite-default.ts)
 * Outputs:
 * !out(bareModuleRewrite-umd.js)
 * !out(bareModuleRewrite-pikacdn.js)
 * !out(bareModuleRewrite-snowpack.js)
 * !out(bareModuleRewrite-unpkg.js)
 * @public
 */
export type BareModuleRewriteSimple = 'snowpack' | 'umd' | 'unpkg' | 'pikacdn'
/**
 * Rewrite module to a UMD access
 * @example
 * ```json
 * { "type": "umd", target: "mylib", globalObject: "window" }
 * ```
 *
 * !src(bareModuleRewrite-complex.ts)
 * Output:
 * !out(bareModuleRewrite-complex.js)
 *
 * This option also support treeshake.
 * !src(treeshake-test/tsconfig.json)
 * !src(treeshake-test/src/index.ts)
 *
 * Output:
 * !out(treeshake-test/index.js)
 * Extra file: (Therefore you can feed this file to Webpack / Rollup and get treeshaked.)
 * !src(treeshake-test/deps.js)
 * @public
 */
export interface BareModuleRewriteUMD {
    type: 'umd'
    /**
     * Rewrite the matching import statement to specified global variable
     * @example "mylib.$1"
     */
    target: string
    /**
     * {@inheritdoc PluginConfigs.globalObject}
     */
    globalObject?: string
    /**
     * should be a URL. Will use a `import 'umdImportPath'` to load the UMD then deconstruct from it.
     */
    umdImportPath?: string
    treeshake?: {
        out: string
    }
}
/**
 * Rewrite module to another URL
 * @public
 * @example
 * ```json
 * {
 *     "type": "url",
 *     "withVersion": "https://cdn.example.com/$packageName$/v$version$""
 *     "noVersion": "https://cdn.example.com/$packageName$/latest"
 * }
 * ```
 *
 * Source code:
 * !src(bareModuleRewrite-default.ts)
 * Output:
 * !out(bareModuleRewrite-url.js)
 */
export interface BareModuleRewriteURL {
    type: 'url'
    /**
     * Rewrite to this URL if the transformer can read the version of the package
     */
    withVersion?: string
    /**
     * Rewrite to this URL if the transformer can't read the version of the package
     */
    noVersion?: string
}
/**
 * Rewrite the module by complex rules.
 * @remarks
 * - `false`: disable the transform
 *
 * - {@link BareModuleRewriteURL}: Rewrite to another URL
 *
 * - {@link BareModuleRewriteUMD}: Rewrite to a UMD variable access.
 *
 * - `Record<string, `{@link BareModuleRewriteObject}`>`: string can be a string or a RegExp to match import path. If you're using the package "type", you should write it as "/^type$/"
 *
 * - Enum {@link BareModuleRewriteSimple}:
 *
 * - - `"snowpack"`: if you are using {@link https://github.com/pikapkg/snowpack | snowpack}
 *
 * - - `"umd"`: make your `import a from 'b'` to `const a = globalThis.b`
 *
 * - - `"unpkg"`: try to transform imports path to "https://unpkg.com/package\@version/index.js?module"
 *
 * - - `"pikacdn"`: try to transform import path to "https://cdn.pika.dev/package\@version"
 *
 * @example
 * Example for `Record<string, `{@link BareModuleRewriteObject}`>`
 * ```jsonc
 * {
 *    "my-pkg": "umd", // to globalThis.myPkg
 *    "my-pkg2": "pikacdn", // to https://cdn.pika.dev/my-pkg2
 *    "my-pkg3": "unpkg", // to https://unpkg.com/my-pkg3
 *    "/my-pkg-(.+)/": {
 *        type: 'umd',
 *        target: 'getMyPkg("$1")'
 *    }, // for "my-pkg-12" to globalThis.getMyPkg("12")
 * }
 * ```
 *
 * Source code:
 * !src(bareModuleRewrite-default.ts)
 * Outputs:
 * !out(bareModuleRewrite-false.js)
 * !out(bareModuleRewrite-umd.js)
 * !out(bareModuleRewrite-pikacdn.js)
 * !out(bareModuleRewrite-snowpack.js)
 * !out(bareModuleRewrite-unpkg.js)
 * !out(bareModuleRewrite-url.js)
 *
 * Complex example:
 * !src(bareModuleRewrite-complex.ts)
 * Output:
 * !out(bareModuleRewrite-complex.js)
 * @defaultValue umd
 * @public
 */
export type BareModuleRewriteObject = false | BareModuleRewriteSimple | BareModuleRewriteUMD | BareModuleRewriteURL
/**
 * Rewrite dynamic import with a custom function
 * @public
 * @remarks
 * The function in the `function` should have the signature of:
 *
 * ```ts
 * (path: string, defaultImpl: (path: string) => Promise<unknown>) => Promise<unknown>
 * ```
 *
 * where the `defaultImpl` is the transformer's default runtime helper.
 *
 * The function must be an ArrowFunctionExpression on the syntax level.
 * @example
 * ```js
 * {
 *      type: 'custom',
 *      function: "(path, defaultImpl) => defaultImpl('std:' + path)"
 * }
 * ```
 */
export interface DynamicImportPathRewriteCustom {
    type: 'custom'
    /**
     * The function string. It must be an ArrowFunctionExpression.
     */
    function: string
}
/**
 * @public
 * @remarks Internal usage.
 */
export type ImportMapFunctionOpts = {
    moduleSpecifier: string
    sourceFilePath: string
    rootDir: string
    config: PluginConfigs
    tsconfigPath: string
}
